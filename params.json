{"name":"Jager","tagline":"A simple build tool with a fluent interface","body":"# Jager [![Jager on NPM](http://img.shields.io/npm/v/jager.svg)](https://www.npmjs.com/package/jager)\r\n\r\n> A simple build tool with a fluent interface\r\n\r\n## Example\r\n```js\r\nvar jager = require('jager');\r\n\r\n// create a new chain of actions\r\nvar livereload = jager.create()\r\n\t('livereload'); // add a plugin to the chain\r\n\r\n// create a chain which handles the javascript processing\r\nvar js = jager.create()\r\n\t('src', 'jagerfile.js') // source of the chain\r\n\t('uglify') // chain it to the uglify plugin\r\n\t('rename', 'renamed-jagerfile.js') //  rename the file\r\n\t('dest', '.'); // write the file\r\n\r\n// create tasks to execute the defined chains\r\njager.task('js', js);\r\n\r\n// `{ watch: true }` is used to tell jager to rerun the task when\r\n// any of the source files or its dependencies change\r\njager.task('watch:js', { watch: true },  js, livereload);\r\n\r\n// create a chain to process the less files\r\nvar less = jager.create()\r\n\t('src', 'main.less', { dependencies: '*.less' }) // specify a source file and a list of possible dependencies\r\n\t('less') // chain it to the less plugin\r\n\t('rename', 'main.css') // rename it\r\n\t('autoprefixer') // call the autoprefixer plugin on it\r\n\t('dest', '.'); // write the file\r\n\r\n// create tasks for the less chains\r\njager.task('less', less);\r\njager.task('watch:less', { watch: true }, less, livereload);\r\n\r\n// create a task for two chains, which will run simultaneously\r\njager.task('watch', { watch: true }, [js, less], livereload);\r\n```\r\n\r\n## Usage\r\n\r\nInstall with `npm install --save jager` and `npm install -g jager`, after create a `Jagerfile.js` file (see example above) in your project root. Then you can run `jager [task]` to execute your task.\r\n\r\nAlternatively you can skip the global install and use the version in `node_modules/.bin/`, which is automatically added to your `PATH` when you run it with `npm run`. For example, the following `package.json` script would run the watch task without the globally installed version.\r\n\r\n```json\r\n{\r\n\t\"scripts\": {\r\n\t\t\"watch\": \"jager watch\"\r\n\t}\r\n}\r\n```\r\n\r\nRun with `npm run watch`, no need for the global!\r\n\r\n## Create a plugin\r\n\r\nPlugins have pretty simple structure, like so:\r\n\r\n```js\r\nmodule.exports = function(options) {\r\n\t// the arguments to this function come from the `Jagerfile.js` file, for example:\r\n\t// `('src', 'script.js')` would give the `'script.js'` as argument\r\n\r\n\treturn function(files, cb) {\r\n\t\t// files contains an array with `jager.File` instances, which you can manipulate\r\n\t\tcb(null, files);\r\n\t};\r\n};\r\n```\r\n\r\nJager automatically loads plugins when they follow the convention that when the module name is `jager-something-something`, it will load that plugin whenn you call it with `('something-something')`. You can also just pass the function you normally return in your plugin directly to Jager:\r\n\r\n```js\r\njager.create()\r\n\t(function(files, cb) {\r\n\t\tcb(null, files);\r\n\t});\r\n```\r\n\r\n## `jager.File`\r\n\r\n- `filename()`: Return the filename for the file\r\n- `contents([string])`: When an argument is given, the contents are updated. Returns the contents\r\n- `buffer([buffer]))`: When an argument is given, the internal buffer is updated. Return the internal buffer\r\n- `stat([stat])`: When an argument is given, the stat is updated. Return the stat\r\n- `rename(filename)`: Rename the file, the stat is updated to now\r\n\r\nYou can use both `contents()` and `buffer()` mixed, they will be converted on the fly when needed.\r\n\r\n## Built-in plugins\r\n\r\nJager has some builtin plugins to get you started:\r\n\r\n- [`src`: Add source files](#src-add-source-files)\r\n- [`dest`: Write files](#dest-write-files)\r\n- [`browserify`: Process a file with browserify](#browserify-process-a-file-with-browserify)\r\n- [`newer`: Filter old files out of the chain](#newer-filter-old-files-out-of-the-chain)\r\n- [`uglify`: Uglify javascript](#uglify-uglify-javascript)\r\n- [`concat`: Combine source files](#concat-combine-source-files)\r\n- [`rename`: Rename a file](#rename-rename-a-file)\r\n- [`less`: Process less files](#less-process-less-files)\r\n- [`autoprefixer`: Add vendor prefixes to css](#autoprefixer-add-vendor-prefixes-to-css)\r\n- [`angular-templates`: Create cache file for all angular templates](#angular-templates-create-cache-file-for-all-angular-templates)\r\n- [`ngmin`: Create a version of angular-js-file that is uglify save](#ngmin-create-a-version-of-angular-js-file-that-is-uglify-save)\r\n- [`bower-src`: Add files from your bower config](#bower-src-add-files-from-your-bower-config)\r\n- [`babel`: Transform ES6 to ES5 javascript](#babel-transform-es6-to-es5-javascript)\r\n- [`livereload`: Reloads your browser when files change](#livereload-reloads-your-browser-when-files-change)\r\n- [`imagemin`: Minify images seamlessly](#imagemin-minify-images-seamlessly)\r\n- [`postcss`: Transforming CSS with JS plugins](#postcss-transforming-css-with-js-plugins)\r\n- [`extract-sourcemap`: Extract sourcemaps into separate files](#extract-sourcemap-extract-sourcemaps-into-separate-files)\r\n- [`modernizr`: Create on the fly modernizr builds](#modernizr-create-on-the-fly-modernizr-builds)\r\n- [`clean-css`: Library for minifying CSS files](#clean-css-library-for-minifying-css-files)\r\n\r\n### `src`: Add source files\r\n\r\nAdd files to the chain used for processing\r\n\r\n**API**: `('src', pattern[, options])`\r\n\r\n- `pattern`: a glob to find files\r\n- `options`:\r\n\t- `dependencies`: a glob to describe dependencies of this source, is used to trigger the rerun when a file is changed (default: `null`)\r\n\r\n### `dest`: Write files\r\n\r\nWrite files in the chain to a given destination. By default only files with a newer `mtime` are written.\r\n\r\n**API**: `('dest', dir[, options])`\r\n\r\n- `dir`: the directory to which the files in the chain are written, if the directory does not exist, it's created\r\n- `options`:\r\n\t- `checkContents`: Check for the contents of the new file location, if the contents is the same, the file is not written (default: `false`)\r\n\r\n### `browserify`: Process a file with browserify\r\n\r\nBrowserify lets you `require('modules')` in the browser by bundling up all of your dependencies. When watch mode is active `watchify` is used to produces faster builds.\r\n\r\n**API**: `('browserify'[, options])`\r\n\r\n- `options`:\r\n\t- See the [browserify options] for details\r\n\t- Extra options:\r\n\t\t- `babel`: When set the babel transform is used, see [babel options] for more options\r\n\t\t- `sourceMap`: These options are in line with the options used in the [less options] (currently only `sourceMapBasepath` is supported)\r\n\r\n[browserify options]: https://github.com/substack/node-browserify#var-b--browserifyfiles-or-opts\r\n[babel options]: http://babeljs.io/docs/usage/options/\r\n[less options]: http://lesscss.org/usage/#programmatic-usage\r\n\r\n### `newer`: Filter old files out of the chain\r\n\r\n**API**: `('newer', target[, options])`\r\n\r\n- `target`: The target to which you want to compare the files in the chain\r\n- `options`:\r\n\t- `basePath`: Common base path between target and source files (default: `cwd`)\r\n\t- `checkContents`: Check for the contents of the new file location, if the contents is the same, the file is filteredwritten (default: `false`)\r\n\r\n### `uglify`: Uglify javascript\r\n\r\nCompress javascript files\r\n\r\n**API**: `('uglify')`\r\n\r\n### `concat`: Combine source files\r\n\r\nCombine all files in the chain into a new file\r\n\r\n**API**: `('concat', filename)`\r\n\r\n- `filename`: The filename for the new file\r\n\r\n### `rename`: Rename a file\r\n\r\nRename the first file in the chain, if it doesn't exist, an empty file is added to the chain\r\n\r\n**API**: `('rename', filename)`\r\n\r\n- `filename`: the new filename. The following replacements will be done in the filename:\r\n\t- `[timestamp]`: the current timestamp is included\r\n\t- `[hash]`: the md5 checksum of the contents is included\r\n\r\n### `less`: Process less files\r\n\r\nProcess less file into css files\r\n\r\n**API**: `('less'[, options])`\r\n\r\n- `options`: See [less options] for all the available options\r\n\r\n[less options]: http://lesscss.org/usage/#programmatic-usage\r\n\r\n### `autoprefixer`: Add vendor prefixes to css\r\n\r\nPlugin to parse CSS and add vendor prefixes to CSS rules using values from [Can I Use]. It is [recommended] by Google and used in Twitter, and Taobao.\r\n\r\n[Can I Use]: http://caniuse.com/\r\n[recommended]: https://developers.google.com/web/fundamentals/tools/build/setupbuildprocess#dont-trip-up-with-vendor-prefixes\r\n\r\n**API**: `('autoprefixer'[, browserVersions])`\r\n\r\n- `browserVersions`: [List of browser you wan to support]\r\n\r\n[List of browser you wan to support]: https://github.com/postcss/autoprefixer/blob/master/README.md#browsers\r\n\r\n### `angular-templates`: Create cache file for all angular templates\r\n\r\nInstead of loading all template files through ajax, include this cache file to make the lookup to these template files instant\r\n\r\n**API**: `('angular-templates'[, options])`\r\n\r\n- `options`:\r\n\t- `base`: Use this to cut a part from the filenames in the cache file, to make it correspond with your template definitions (default: `''`)\r\n\t- `filename`: filename of the output file (default: `templates.js`)\r\n\r\n### `ngmin`: Create a version of angular-js-file that is uglify save\r\n\r\nCreate an properly annotated version of a angular file with [ngmin].\r\n\r\n**API**: `('ngmin')`\r\n\r\n[ngmin]: https://github.com/btford/ngmin\r\n\r\n### `bower-src`: Add files from your bower config\r\n\r\nRecursively add the main files from your bower config to your chain.\r\n\r\n**API**: `('bower', pattern)`\r\n\r\n- `pattern`: glob to match the wanted bower package, ex: `'jquery'` would add the main file for jquery\r\n\r\n### `babel`: Transform ES6 to ES5 javascript\r\n\r\nBabel will turn your ES6+ code into ES5 friendly code, so you can start using it right now without waiting for browser support.\r\n\r\n**API**: `('babel'[, options])`\r\n\r\n- `options`: See the [babel options] for details\r\n\r\n[babel options]: http://babeljs.io/docs/usage/options/\r\n\r\n### `livereload`: Reloads your browser when files change\r\n\r\nNotify the browser of any changes in your chain, compatible with at least the [Chrome plugin] and [Firefox plugin].\r\n\r\n**API**: `('livereload'[, options])`\r\n\r\n- `options`:\r\n\t- `port`: port used by the livereload server (default: `35729`)\r\n\r\n[Chrome plugin]: https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei\r\n[Firefox plugin]: https://addons.mozilla.org/en-us/firefox/addon/livereload/\r\n\r\n### `imagemin`: Minify images seamlessly\r\n\r\nMinifies all images (based on extension) in the chain with [imagemin].\r\n\r\n**API**: `('imagemin'[, options])`\r\n\r\n- `options`:\r\n\t- `gif`: See [gifsicle options] for more information\r\n\t- `jpegtran`: See [jpegtran options] for more information\r\n\t- `optipng`: See [optipng options] for more information\r\n\t- `svgo`: See [svgo options] for more information\r\n\r\n[imagemin]: https://github.com/imagemin/imagemin\r\n[gifsicle options]: https://github.com/imagemin/imagemin-gifsicle\r\n[jpegtran options]: https://github.com/imagemin/imagemin-jpegtran\r\n[optipng options]: https://github.com/imagemin/imagemin-optipng\r\n[svgo options]: https://github.com/imagemin/imagemin-svgo\r\n\r\n### `postcss`: Transforming CSS with JS plugins\r\n\r\n[PostCSS] is a tool for transforming CSS with JS plugins. These plugins can support variables and mixins, transpile future CSS syntax, inline images, and more.\r\n\r\n**API**: `('postcss'[, options])`\r\n\r\n- `options`:\r\n\t- `plugins`: Plugins used by [PostCSS], see [PostCSS plugin options]\r\n\r\n[PostCSS]: https://github.com/postcss/postcss\r\n[PostCSS plugin options]: https://github.com/postcss/postcss#usage\r\n\r\n### `extract-sourcemap`: Extract sourcemaps into separate files\r\n\r\n**API**: `('extract-sourcemap')`\r\n\r\nCreates a file in the same directory as the input file, with a `.map` suffix. The sourcemap in the file is replace with a comment referencing the new file.\r\n\r\n### `modernizr`: Create on the fly modernizr builds\r\n\r\n**API**: `('modernizr'[, options])`\r\n\r\n- `options`: see the [modernizr options] for all available options\r\n\r\n[modernizr options]: https://github.com/Modernizr/Modernizr/blob/master/lib/config-all.json\r\n\r\n### `clean-css`: Library for minifying CSS files\r\n\r\nClean-css is a fast and efficient Node.js library for minifying CSS files. According to [tests] it is one of the best available.\r\n\r\n**API**: `('clean-css'[, options])`\r\n\r\n- `options`: see the [clean-css options] for all available options\r\n\r\n[tests]: http://goalsmashers.github.io/css-minification-benchmark/\r\n[clean-css options]: https://github.com/jakubpawlowicz/clean-css\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}